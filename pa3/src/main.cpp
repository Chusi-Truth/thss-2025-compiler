#include <iostream>
#include <fstream>
#include <any>
#include "SysYLexer.h"
#include "SysYParser.h"
#include "SysYFormatter.h"
#include "antlr4-runtime.h"
using namespace antlr4;

int main(int argc, const char* argv[]) {
    if (argc < 2) {
        std::cerr << "Usage: sysy_formatter <input-file>" << std::endl;
        return 1;
    }
    // TODO: You need to call the lexer and parser generated by ANTLR4,
    // and invoke the visit method in your own implemented Visitor.

    std::ifstream inputFile(argv[1]);
    if (!inputFile.is_open()) {
        std::cerr << "Error: Cannot open file " << argv[1] << std::endl;
        return 1;
    }

    ANTLRInputStream input(inputFile);

    SysYLexer lexer(&input);
    CommonTokenStream tokens(&lexer);

    // 4. 创建语法分析器
    SysYParser parser(&tokens);

    // 5. 从语法分析器获取语法树（假设语法入口规则名为 `compUnit`）
    tree::ParseTree *tree = parser.compUnit();

    // 6. 创建你自己的 Visitor 并访问语法树
    SysYFormatter formatter;
    std::string formatted = std::any_cast<std::string>(formatter.visit(tree));

    // Print formatted result to stdout so callers (and tests) can capture it
    std::cout << formatted;

    return 0;
}